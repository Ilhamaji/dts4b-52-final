import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from "axios";
import { DefaultUrl, OnlyKey } from './DefaultUrl';

const initialState = {
  statusL: "",
  statusM: "",
  statusLeft: "",
  statusLeftB: "",
  statusRight: "",
  statusRightB: "",
  statusPremiumMain: "",
  statusDetail: "",
  statusCategory: "",
  mainNews: [],
  leftNews: [],
  leftNewsB: [],
  rightNews: [],
  rightNewsB: [],
  premiumMain: [],
  detail: [],
  category: [],
};

export const getMainPremiumAsync = createAsyncThunk(
  'news/fetchMainPremiumList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=1&section=sport&type=article`);
    return hasil.data;
  }
);

export const getNewsMainAsync = createAsyncThunk(
  'news/fetchMainList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=3&section=world&type=article`);
    return hasil.data;
  }
);

export const getNewsLeftAsync = createAsyncThunk(
  'news/fetchLeftList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=3&section=film&type=article`);
    return hasil.data;
  }
);

export const getNewsLeftBAsync = createAsyncThunk(
  'news/fetchLeftBottomList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=3&section=world&type=article`);
    return hasil.data;
  }
);

export const getNewsRightAsync = createAsyncThunk(
  'news/fetchRightList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=3&section=politics&type=article`);
    return hasil.data;
  }
);

export const getNewsRightBAsync = createAsyncThunk(
  'news/fetchRightBottomList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=3&section=business&type=article`);
    return hasil.data;
  }
);

export const getDetailAsync = createAsyncThunk(
  'news/fetchDetail',
  async (apiUrl) => {
    const hasil = await axios.get(`${apiUrl}${OnlyKey}`);
    return hasil.data;
  }
);

export const getCategoryAsync = createAsyncThunk(
  'news/fetchCategory',
  async (category) => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=10&section=${category}&type=article`);
    return hasil.data;
  }
);

export const NewsSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
    /* dataFilter: (state, action) => {
      // const parameter = action.payload;
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      let filter = {
        "kodeproduk": ["CWT 01"],
        "id": [78, 7169],
      };
    }, */

    // Use the PayloadAction type to declare the contents of `action.payload`
    sortCategory: (state, action) => {
      let sorted = [];
      const results = state.category.response.results;
      if(action.payload==='asc'){
        sorted = results.sort((a, b) => a.webTitle.localeCompare(b.webTitle));
        //sorted = results.sort((a, b) => a.webTitle - b.webTitle);
      }else{
        sorted = results.sort((a, b) => b.webTitle.localeCompare(a.webTitle));
        //sorted = results.sort((a, b) => b.webTitle - a.webTitle);
      }
      state.category.response.results = sorted;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      //tengah bawah
      .addCase(getNewsMainAsync.pending, (state) => {
        state.statusM = 'loading';
      })
      .addCase(getNewsMainAsync.rejected, (state) => {
        state.statusM = 'rejected';
      })
      .addCase(getNewsMainAsync.fulfilled, (state, action) => {
        state.statusM = 'idle';
        state.mainNews = action.payload;
      })

      //kiri atas
      .addCase(getNewsLeftAsync.pending, (state) => {
        state.statusLeft = 'loading';
      })
      .addCase(getNewsLeftAsync.rejected, (state) => {
        state.statusLeft = 'rejected';
      })
      .addCase(getNewsLeftAsync.fulfilled, (state, action) => {
        state.statusLeft = 'idle';
        state.leftNews = action.payload;
      })

      //kiri bawah
      .addCase(getNewsLeftBAsync.pending, (state) => {
        state.statusLeftB = 'loading';
      })
      .addCase(getNewsLeftBAsync.rejected, (state) => {
        state.statusLeftB = 'rejected';
      })
      .addCase(getNewsLeftBAsync.fulfilled, (state, action) => {
        state.statusLeftB = 'idle';
        state.leftNewsB = action.payload;
      })

      //kanan atas
      .addCase(getNewsRightAsync.pending, (state) => {
        state.statusRight = 'loading';
      })
      .addCase(getNewsRightAsync.rejected, (state) => {
        state.statusRight = 'rejected';
      })
      .addCase(getNewsRightAsync.fulfilled, (state, action) => {
        state.statusRight = 'idle';
        state.rightNews = action.payload;
      })

      //kanan bawah
      .addCase(getNewsRightBAsync.pending, (state) => {
        state.statusRightB = 'loading';
      })
      .addCase(getNewsRightBAsync.rejected, (state) => {
        state.statusRightB = 'rejected';
      })
      .addCase(getNewsRightBAsync.fulfilled, (state, action) => {
        state.statusRightB = 'idle';
        state.rightNewsB = action.payload;
      })

      //premium home tengah atas
      .addCase(getMainPremiumAsync.pending, (state) => {
        state.statusPremiumMain = 'loading';
      })
      .addCase(getMainPremiumAsync.rejected, (state) => {
        state.statusPremiumMain = 'rejected';
      })
      .addCase(getMainPremiumAsync.fulfilled, (state, action) => {
        state.statusPremiumMain = 'idle';
        state.premiumMain = action.payload.response;
      })
      
      //detail
      .addCase(getDetailAsync.pending, (state) => {
        state.statusDetail = 'loading';
      })
      .addCase(getDetailAsync.rejected, (state) => {
        state.statusDetail = 'rejected';
      })
      .addCase(getDetailAsync.fulfilled, (state, action) => {
        state.statusDetail = 'idle';
        state.detail = action.payload.response;
      })
      
      //category
      .addCase(getCategoryAsync.pending, (state) => {
        state.statusDetail = 'loading';
      })
      .addCase(getCategoryAsync.rejected, (state) => {
        state.statusDetail = 'rejected';
      })
      .addCase(getCategoryAsync.fulfilled, (state, action) => {
        state.statusDetail = 'idle';
        state.category = action.payload;
      });
  },
});

export const { sortCategory } = NewsSlice.actions;

export const selectPesanL = (state) => state.news.statusL;
export const selectPensanM = (state) => state.news.statusM;
export const selectPensanLeft = (state) => state.news.statusLeft;
export const selectPensanLeftB = (state) => state.news.statusLeftB;
export const selectPensanRight = (state) => state.news.statusRight;
export const selectPensanRightB = (state) => state.news.statusRightB;
export const selectPesanMainPremium = (state) => state.news.statusPremiumMain;
export const selectPesanDetail = (state) => state.news.statusDetail;
export const selectPesanCategory = (state) => state.news.statusCategory;

export const selectMainNews = (state) => state.news.mainNews;
export const selectLeftNews = (state) => state.news.leftNews;
export const selectLeftBNews = (state) => state.news.leftNewsB;
export const selectRightNews = (state) => state.news.rightNews;
export const selectRightBNews = (state) => state.news.rightNewsB;
export const selectMainPremium = (state) => state.news.premiumMain;
export const selectDetail = (state) => state.news.detail;
export const selectCategory = (state) => state.news.category;

export default NewsSlice.reducer;
