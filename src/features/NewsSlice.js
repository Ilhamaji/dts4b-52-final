import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from "axios";
import DefaultUrl from './DefaultUrl';

const initialState = {
  statusL: "",
  statusM: "",
  statusLeft: "",
  statusRight: "",
  newsList: [],
  mainNews: [],
  leftNews: [],
  rightNews: [],
};

export const getNewsAsync = createAsyncThunk(
  'news/fetchNewsList',
  async (variablenya) => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=1`);
    return hasil.data;
  }
);

export const getNewsMainAsync = createAsyncThunk(
  'news/fetchMainList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=3`);
    return hasil.data;
  }
);

export const getNewsLeftAsync = createAsyncThunk(
  'news/fetchLeftList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=5&section=film`);
    return hasil.data;
  }
);

export const getNewsRightAsync = createAsyncThunk(
  'news/fetchRightList',
  async () => {
    const hasil = await axios.get(`${DefaultUrl}&page-size=5&section=football`);
    return hasil.data;
  }
);

export const NewsSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
    /* dataFilter: (state, action) => {
      // const parameter = action.payload;
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      let filter = {
        "kodeproduk": ["CWT 01"],
        "id": [78, 7169],
      };
    }, */

    /* // Use the PayloadAction type to declare the contents of `action.payload`
    drawerposisi: (state, action) => {
      state.status = action.payload;
    }, */
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getNewsAsync.pending, (state) => {
        state.statusL = 'loading';
      })
      .addCase(getNewsAsync.rejected, (state) => {
        state.statusL = 'rejected';
      })
      .addCase(getNewsAsync.fulfilled, (state, action) => {
        state.statusL = 'idle';
        state.newsList = action.payload;
      })
      .addCase(getNewsMainAsync.pending, (state) => {
        state.statusM = 'loading';
      })
      .addCase(getNewsMainAsync.rejected, (state) => {
        state.statusM = 'rejected';
      })
      .addCase(getNewsMainAsync.fulfilled, (state, action) => {
        state.statusM = 'idle';
        state.mainNews = action.payload;
      })
      .addCase(getNewsLeftAsync.pending, (state) => {
        state.statusLeft = 'loading';
      })
      .addCase(getNewsLeftAsync.rejected, (state) => {
        state.statusLeft = 'rejected';
      })
      .addCase(getNewsLeftAsync.fulfilled, (state, action) => {
        state.statusLeft = 'idle';
        state.leftNews = action.payload;
      })
      .addCase(getNewsRightAsync.pending, (state) => {
        state.statusRight = 'loading';
      })
      .addCase(getNewsRightAsync.rejected, (state) => {
        state.statusRight = 'rejected';
      })
      .addCase(getNewsRightAsync.fulfilled, (state, action) => {
        state.statusRight = 'idle';
        state.rightNews = action.payload;
      });
  },
});

export const { dataFilter } = NewsSlice.actions;

export const selectPesanL = (state) => state.news.statusL;
export const selectPensanM = (state) => state.news.statusM;
export const selectPensanLeft = (state) => state.news.statusLeft;
export const selectPensanRight = (state) => state.news.statusRight;
export const news = (state) => state.news.newsList;
export const selectMainNews = (state) => state.news.mainNews;
export const selectLeftNews = (state) => state.news.leftNews;
export const selectRightNews = (state) => state.news.rightNews;

export default NewsSlice.reducer;
